#version 330 core

in vec2 vs_uv;
in vec3 vs_normal;
in vec3 vs_fragpos;

struct clight_t {
	vec4	pos;
	vec4	color;
};

layout (std140) uniform block {
	mat4	model;
	mat4	transform;

	bool dead;

	clight_t	lights[48];
};

out vec4 frag_color;

uniform sampler2D sampler;

float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main() {
	vec2 tex = floor(vs_uv * vec2(128, 256)) / vec2(128, 256);

	vec4 color = texture2D(sampler, vs_uv);

	if (color.w == 0)
		discard;
	
	if (dead) {
		float f = floor(color.x * 4) / 4 + 0.8;

		color = vec4(f * 0.7, 0, 0, 1);

		frag_color = color;

		return;
	}

	vec3 delta;
	vec3 light_dir;

	float d, diffuse, attuention, brightness = 0;

	vec3 light = vec3(0);
	float light_count = 0;

	bool glow = color.x > color.y + color.z;
	bool calc_diffuse = vs_normal.x + vs_normal.y + vs_normal.z > 0.0;

	for (int i = 0; i < 48; i++) {
		if (lights[i].color.w <= 0.0)
			continue;

		delta = vec3(lights[i].pos) - vs_fragpos;

		light_dir = normalize(delta);

		d = max(lights[i].color.w - length(delta), 0) / lights[i].color.w;
		attuention = min(d * d * 3.0, 2);

		if (calc_diffuse) {
			diffuse = dot(vs_normal, light_dir);

			attuention *= diffuse;
		}

		brightness += attuention;
		
		light += vec3(lights[i].color) * attuention;
		light_count++;
	}

	if (glow && brightness < 1.0)
		light = vec3( 1 );
	
	light += vec3(0.2f, 0.05, 0.05);

	frag_color = color;
	frag_color.xyz *= (0.15 + light);

	float total = floor(gl_FragCoord.x / 3.0) + floor(gl_FragCoord.y / 3.0);

	if (mod(total, 2) == 0)
		frag_color.xyz *= 0.8;
	
	frag_color.xyz = floor(frag_color.xyz * 64.0) / 64.0;
}
